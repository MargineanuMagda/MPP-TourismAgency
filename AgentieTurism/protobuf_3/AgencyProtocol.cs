// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AgencyProtocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Agency.Protocol {

  /// <summary>Holder for reflection information generated from AgencyProtocol.proto</summary>
  public static partial class AgencyProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for AgencyProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AgencyProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRBZ2VuY3lQcm90b2NvbC5wcm90bxIPYWdlbmN5LnByb3RvY29sIj8KC1Ry",
            "YXZlbEFnZW50Eg4KBnVzZXJJZBgBIAEoAxIQCgh1c2VybmFtZRgCIAEoCRIO",
            "CgZwYXNzd2QYAyABKAkicAoLUmVzZXJ2YXRpb24SDgoGY2xpZW50GAEgASgJ",
            "Eg8KB3RlbGVmb24YAiABKAkSDgoGdHJpcElEGAMgASgDEg0KBXBsYWNlGAQg",
            "ASgJEhEKCWF2VGlja2V0cxgFIAEoBRIOCgZuclRpY2sYBiABKAUifQoEVHJp",
            "cBIOCgZ0cmlwSWQYASABKAMSDQoFcGxhY2UYAiABKAkSEQoJdHJhbnNwb3J0",
            "GAMgASgJEgwKBGRhdGUYBCABKAkSDQoFcHJpY2UYBSABKAESEQoJbnJUaWNr",
            "ZXRzGAYgASgFEhMKC2ZyZWVUaWNrZXRzGAcgASgFIjkKBkZpbHRlchINCgVw",
            "bGFjZRgBIAEoCRIPCgdtaW5Ib3VyGAIgASgFEg8KB21heEhvdXIYAyABKAUi",
            "2gIKDUFnZW5jeVJlcXVlc3QSMQoEdHlwZRgBIAEoDjIjLmFnZW5jeS5wcm90",
            "b2NvbC5BZ2VuY3lSZXF1ZXN0LlR5cGUSLAoEdXNlchgCIAEoCzIcLmFnZW5j",
            "eS5wcm90b2NvbC5UcmF2ZWxBZ2VudEgAEjMKC3Jlc2VydmF0aW9uGAMgASgL",
            "MhwuYWdlbmN5LnByb3RvY29sLlJlc2VydmF0aW9uSAASLgoLZmlsdGVyVHJp",
            "cHMYBCABKAsyFy5hZ2VuY3kucHJvdG9jb2wuRmlsdGVySAAieAoEVHlwZRIL",
            "CgdVbmtub3duEAASCQoFTE9HSU4QARIKCgZMT0dPVVQQAhIRCg1HRVRfQUxM",
            "X1RSSVBTEAMSFgoSVFJJUFNfQllfTkFNRV9IT1VSEAQSEwoPQUREX1JFU0VS",
            "VkFUSU9OEAUSDAoIQUREX1VTRVIQBkIJCgdwYXlsb2FkIvICCg5BZ2VuY3lS",
            "ZXNwb25zZRIyCgR0eXBlGAEgASgOMiQuYWdlbmN5LnByb3RvY29sLkFnZW5j",
            "eVJlc3BvbnNlLlR5cGUSDQoFRXJyb3IYAiABKAkSKgoEdXNlchgDIAEoCzIc",
            "LmFnZW5jeS5wcm90b2NvbC5UcmF2ZWxBZ2VudBIkCgV0cmlwcxgEIAMoCzIV",
            "LmFnZW5jeS5wcm90b2NvbC5UcmlwEjEKC3Jlc2VydmF0aW9uGAUgASgLMhwu",
            "YWdlbmN5LnByb3RvY29sLlJlc2VydmF0aW9uIpcBCgRUeXBlEgsKB1Vua25v",
            "d24QABIGCgJPSxABEgkKBUVSUk9SEAISEQoNR0VUX0FMTF9UUklQUxADEgoK",
            "BlVQREFURRAEEhIKDlRSSVBTX0ZJTFRFUkVEEAUSEwoPTkVXX1JFU0VSVkFU",
            "SU9OEAYSEgoOVVNFUl9MT0dHRURfSU4QBxITCg9VU0VSX0xPR0dFRF9PVVQQ",
            "CEIkChFwcm90b2J1ZmZwcm90b2NvbEIPQWdlbmN5UHJvdG9idWZzYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Agency.Protocol.TravelAgent), global::Agency.Protocol.TravelAgent.Parser, new[]{ "UserId", "Username", "Passwd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Agency.Protocol.Reservation), global::Agency.Protocol.Reservation.Parser, new[]{ "Client", "Telefon", "TripID", "Place", "AvTickets", "NrTick" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Agency.Protocol.Trip), global::Agency.Protocol.Trip.Parser, new[]{ "TripId", "Place", "Transport", "Date", "Price", "NrTickets", "FreeTickets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Agency.Protocol.Filter), global::Agency.Protocol.Filter.Parser, new[]{ "Place", "MinHour", "MaxHour" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Agency.Protocol.AgencyRequest), global::Agency.Protocol.AgencyRequest.Parser, new[]{ "Type", "User", "Reservation", "FilterTrips" }, new[]{ "Payload" }, new[]{ typeof(global::Agency.Protocol.AgencyRequest.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Agency.Protocol.AgencyResponse), global::Agency.Protocol.AgencyResponse.Parser, new[]{ "Type", "Error", "User", "Trips", "Reservation" }, null, new[]{ typeof(global::Agency.Protocol.AgencyResponse.Types.Type) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TravelAgent : pb::IMessage<TravelAgent> {
    private static readonly pb::MessageParser<TravelAgent> _parser = new pb::MessageParser<TravelAgent>(() => new TravelAgent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TravelAgent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Agency.Protocol.AgencyProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TravelAgent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TravelAgent(TravelAgent other) : this() {
      userId_ = other.userId_;
      username_ = other.username_;
      passwd_ = other.passwd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TravelAgent Clone() {
      return new TravelAgent(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passwd" field.</summary>
    public const int PasswdFieldNumber = 3;
    private string passwd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passwd {
      get { return passwd_; }
      set {
        passwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TravelAgent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TravelAgent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Username != other.Username) return false;
      if (Passwd != other.Passwd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Passwd.Length != 0) hash ^= Passwd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Passwd.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Passwd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Passwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passwd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TravelAgent other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Passwd.Length != 0) {
        Passwd = other.Passwd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            Passwd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Reservation : pb::IMessage<Reservation> {
    private static readonly pb::MessageParser<Reservation> _parser = new pb::MessageParser<Reservation>(() => new Reservation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reservation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Agency.Protocol.AgencyProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reservation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reservation(Reservation other) : this() {
      client_ = other.client_;
      telefon_ = other.telefon_;
      tripID_ = other.tripID_;
      place_ = other.place_;
      avTickets_ = other.avTickets_;
      nrTick_ = other.nrTick_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reservation Clone() {
      return new Reservation(this);
    }

    /// <summary>Field number for the "client" field.</summary>
    public const int ClientFieldNumber = 1;
    private string client_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Client {
      get { return client_; }
      set {
        client_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "telefon" field.</summary>
    public const int TelefonFieldNumber = 2;
    private string telefon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Telefon {
      get { return telefon_; }
      set {
        telefon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tripID" field.</summary>
    public const int TripIDFieldNumber = 3;
    private long tripID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TripID {
      get { return tripID_; }
      set {
        tripID_ = value;
      }
    }

    /// <summary>Field number for the "place" field.</summary>
    public const int PlaceFieldNumber = 4;
    private string place_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Place {
      get { return place_; }
      set {
        place_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avTickets" field.</summary>
    public const int AvTicketsFieldNumber = 5;
    private int avTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvTickets {
      get { return avTickets_; }
      set {
        avTickets_ = value;
      }
    }

    /// <summary>Field number for the "nrTick" field.</summary>
    public const int NrTickFieldNumber = 6;
    private int nrTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NrTick {
      get { return nrTick_; }
      set {
        nrTick_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reservation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reservation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Client != other.Client) return false;
      if (Telefon != other.Telefon) return false;
      if (TripID != other.TripID) return false;
      if (Place != other.Place) return false;
      if (AvTickets != other.AvTickets) return false;
      if (NrTick != other.NrTick) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Client.Length != 0) hash ^= Client.GetHashCode();
      if (Telefon.Length != 0) hash ^= Telefon.GetHashCode();
      if (TripID != 0L) hash ^= TripID.GetHashCode();
      if (Place.Length != 0) hash ^= Place.GetHashCode();
      if (AvTickets != 0) hash ^= AvTickets.GetHashCode();
      if (NrTick != 0) hash ^= NrTick.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Client.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Client);
      }
      if (Telefon.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Telefon);
      }
      if (TripID != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TripID);
      }
      if (Place.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Place);
      }
      if (AvTickets != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AvTickets);
      }
      if (NrTick != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NrTick);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Client.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Client);
      }
      if (Telefon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Telefon);
      }
      if (TripID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TripID);
      }
      if (Place.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Place);
      }
      if (AvTickets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvTickets);
      }
      if (NrTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NrTick);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reservation other) {
      if (other == null) {
        return;
      }
      if (other.Client.Length != 0) {
        Client = other.Client;
      }
      if (other.Telefon.Length != 0) {
        Telefon = other.Telefon;
      }
      if (other.TripID != 0L) {
        TripID = other.TripID;
      }
      if (other.Place.Length != 0) {
        Place = other.Place;
      }
      if (other.AvTickets != 0) {
        AvTickets = other.AvTickets;
      }
      if (other.NrTick != 0) {
        NrTick = other.NrTick;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Client = input.ReadString();
            break;
          }
          case 18: {
            Telefon = input.ReadString();
            break;
          }
          case 24: {
            TripID = input.ReadInt64();
            break;
          }
          case 34: {
            Place = input.ReadString();
            break;
          }
          case 40: {
            AvTickets = input.ReadInt32();
            break;
          }
          case 48: {
            NrTick = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Trip : pb::IMessage<Trip> {
    private static readonly pb::MessageParser<Trip> _parser = new pb::MessageParser<Trip>(() => new Trip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Trip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Agency.Protocol.AgencyProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trip(Trip other) : this() {
      tripId_ = other.tripId_;
      place_ = other.place_;
      transport_ = other.transport_;
      date_ = other.date_;
      price_ = other.price_;
      nrTickets_ = other.nrTickets_;
      freeTickets_ = other.freeTickets_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Trip Clone() {
      return new Trip(this);
    }

    /// <summary>Field number for the "tripId" field.</summary>
    public const int TripIdFieldNumber = 1;
    private long tripId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TripId {
      get { return tripId_; }
      set {
        tripId_ = value;
      }
    }

    /// <summary>Field number for the "place" field.</summary>
    public const int PlaceFieldNumber = 2;
    private string place_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Place {
      get { return place_; }
      set {
        place_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transport" field.</summary>
    public const int TransportFieldNumber = 3;
    private string transport_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Transport {
      get { return transport_; }
      set {
        transport_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 4;
    private string date_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 5;
    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "nrTickets" field.</summary>
    public const int NrTicketsFieldNumber = 6;
    private int nrTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NrTickets {
      get { return nrTickets_; }
      set {
        nrTickets_ = value;
      }
    }

    /// <summary>Field number for the "freeTickets" field.</summary>
    public const int FreeTicketsFieldNumber = 7;
    private int freeTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeTickets {
      get { return freeTickets_; }
      set {
        freeTickets_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Trip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Trip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TripId != other.TripId) return false;
      if (Place != other.Place) return false;
      if (Transport != other.Transport) return false;
      if (Date != other.Date) return false;
      if (Price != other.Price) return false;
      if (NrTickets != other.NrTickets) return false;
      if (FreeTickets != other.FreeTickets) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TripId != 0L) hash ^= TripId.GetHashCode();
      if (Place.Length != 0) hash ^= Place.GetHashCode();
      if (Transport.Length != 0) hash ^= Transport.GetHashCode();
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      if (Price != 0D) hash ^= Price.GetHashCode();
      if (NrTickets != 0) hash ^= NrTickets.GetHashCode();
      if (FreeTickets != 0) hash ^= FreeTickets.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TripId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TripId);
      }
      if (Place.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Place);
      }
      if (Transport.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Transport);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Date);
      }
      if (Price != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Price);
      }
      if (NrTickets != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NrTickets);
      }
      if (FreeTickets != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FreeTickets);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TripId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TripId);
      }
      if (Place.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Place);
      }
      if (Transport.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Transport);
      }
      if (Date.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (NrTickets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NrTickets);
      }
      if (FreeTickets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTickets);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Trip other) {
      if (other == null) {
        return;
      }
      if (other.TripId != 0L) {
        TripId = other.TripId;
      }
      if (other.Place.Length != 0) {
        Place = other.Place;
      }
      if (other.Transport.Length != 0) {
        Transport = other.Transport;
      }
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.NrTickets != 0) {
        NrTickets = other.NrTickets;
      }
      if (other.FreeTickets != 0) {
        FreeTickets = other.FreeTickets;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TripId = input.ReadInt64();
            break;
          }
          case 18: {
            Place = input.ReadString();
            break;
          }
          case 26: {
            Transport = input.ReadString();
            break;
          }
          case 34: {
            Date = input.ReadString();
            break;
          }
          case 41: {
            Price = input.ReadDouble();
            break;
          }
          case 48: {
            NrTickets = input.ReadInt32();
            break;
          }
          case 56: {
            FreeTickets = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Filter : pb::IMessage<Filter> {
    private static readonly pb::MessageParser<Filter> _parser = new pb::MessageParser<Filter>(() => new Filter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Filter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Agency.Protocol.AgencyProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter(Filter other) : this() {
      place_ = other.place_;
      minHour_ = other.minHour_;
      maxHour_ = other.maxHour_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter Clone() {
      return new Filter(this);
    }

    /// <summary>Field number for the "place" field.</summary>
    public const int PlaceFieldNumber = 1;
    private string place_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Place {
      get { return place_; }
      set {
        place_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minHour" field.</summary>
    public const int MinHourFieldNumber = 2;
    private int minHour_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinHour {
      get { return minHour_; }
      set {
        minHour_ = value;
      }
    }

    /// <summary>Field number for the "maxHour" field.</summary>
    public const int MaxHourFieldNumber = 3;
    private int maxHour_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHour {
      get { return maxHour_; }
      set {
        maxHour_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Filter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Filter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Place != other.Place) return false;
      if (MinHour != other.MinHour) return false;
      if (MaxHour != other.MaxHour) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Place.Length != 0) hash ^= Place.GetHashCode();
      if (MinHour != 0) hash ^= MinHour.GetHashCode();
      if (MaxHour != 0) hash ^= MaxHour.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Place.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Place);
      }
      if (MinHour != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MinHour);
      }
      if (MaxHour != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxHour);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Place.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Place);
      }
      if (MinHour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinHour);
      }
      if (MaxHour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHour);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Filter other) {
      if (other == null) {
        return;
      }
      if (other.Place.Length != 0) {
        Place = other.Place;
      }
      if (other.MinHour != 0) {
        MinHour = other.MinHour;
      }
      if (other.MaxHour != 0) {
        MaxHour = other.MaxHour;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Place = input.ReadString();
            break;
          }
          case 16: {
            MinHour = input.ReadInt32();
            break;
          }
          case 24: {
            MaxHour = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AgencyRequest : pb::IMessage<AgencyRequest> {
    private static readonly pb::MessageParser<AgencyRequest> _parser = new pb::MessageParser<AgencyRequest>(() => new AgencyRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AgencyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Agency.Protocol.AgencyProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgencyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgencyRequest(AgencyRequest other) : this() {
      type_ = other.type_;
      switch (other.PayloadCase) {
        case PayloadOneofCase.User:
          User = other.User.Clone();
          break;
        case PayloadOneofCase.Reservation:
          Reservation = other.Reservation.Clone();
          break;
        case PayloadOneofCase.FilterTrips:
          FilterTrips = other.FilterTrips.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgencyRequest Clone() {
      return new AgencyRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Agency.Protocol.AgencyRequest.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Agency.Protocol.AgencyRequest.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Agency.Protocol.TravelAgent User {
      get { return payloadCase_ == PayloadOneofCase.User ? (global::Agency.Protocol.TravelAgent) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.User;
      }
    }

    /// <summary>Field number for the "reservation" field.</summary>
    public const int ReservationFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Agency.Protocol.Reservation Reservation {
      get { return payloadCase_ == PayloadOneofCase.Reservation ? (global::Agency.Protocol.Reservation) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Reservation;
      }
    }

    /// <summary>Field number for the "filterTrips" field.</summary>
    public const int FilterTripsFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Agency.Protocol.Filter FilterTrips {
      get { return payloadCase_ == PayloadOneofCase.FilterTrips ? (global::Agency.Protocol.Filter) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.FilterTrips;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      User = 2,
      Reservation = 3,
      FilterTrips = 4,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AgencyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AgencyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Reservation, other.Reservation)) return false;
      if (!object.Equals(FilterTrips, other.FilterTrips)) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.User) hash ^= User.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Reservation) hash ^= Reservation.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.FilterTrips) hash ^= FilterTrips.GetHashCode();
      hash ^= (int) payloadCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (payloadCase_ == PayloadOneofCase.User) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (payloadCase_ == PayloadOneofCase.Reservation) {
        output.WriteRawTag(26);
        output.WriteMessage(Reservation);
      }
      if (payloadCase_ == PayloadOneofCase.FilterTrips) {
        output.WriteRawTag(34);
        output.WriteMessage(FilterTrips);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (payloadCase_ == PayloadOneofCase.User) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (payloadCase_ == PayloadOneofCase.Reservation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reservation);
      }
      if (payloadCase_ == PayloadOneofCase.FilterTrips) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FilterTrips);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AgencyRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.User:
          User = other.User;
          break;
        case PayloadOneofCase.Reservation:
          Reservation = other.Reservation;
          break;
        case PayloadOneofCase.FilterTrips:
          FilterTrips = other.FilterTrips;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Agency.Protocol.AgencyRequest.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            global::Agency.Protocol.TravelAgent subBuilder = new global::Agency.Protocol.TravelAgent();
            if (payloadCase_ == PayloadOneofCase.User) {
              subBuilder.MergeFrom(User);
            }
            input.ReadMessage(subBuilder);
            User = subBuilder;
            break;
          }
          case 26: {
            global::Agency.Protocol.Reservation subBuilder = new global::Agency.Protocol.Reservation();
            if (payloadCase_ == PayloadOneofCase.Reservation) {
              subBuilder.MergeFrom(Reservation);
            }
            input.ReadMessage(subBuilder);
            Reservation = subBuilder;
            break;
          }
          case 34: {
            global::Agency.Protocol.Filter subBuilder = new global::Agency.Protocol.Filter();
            if (payloadCase_ == PayloadOneofCase.FilterTrips) {
              subBuilder.MergeFrom(FilterTrips);
            }
            input.ReadMessage(subBuilder);
            FilterTrips = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AgencyRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("Unknown")] Unknown = 0,
        [pbr::OriginalName("LOGIN")] Login = 1,
        [pbr::OriginalName("LOGOUT")] Logout = 2,
        [pbr::OriginalName("GET_ALL_TRIPS")] GetAllTrips = 3,
        [pbr::OriginalName("TRIPS_BY_NAME_HOUR")] TripsByNameHour = 4,
        [pbr::OriginalName("ADD_RESERVATION")] AddReservation = 5,
        [pbr::OriginalName("ADD_USER")] AddUser = 6,
      }

    }
    #endregion

  }

  public sealed partial class AgencyResponse : pb::IMessage<AgencyResponse> {
    private static readonly pb::MessageParser<AgencyResponse> _parser = new pb::MessageParser<AgencyResponse>(() => new AgencyResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AgencyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Agency.Protocol.AgencyProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgencyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgencyResponse(AgencyResponse other) : this() {
      type_ = other.type_;
      error_ = other.error_;
      User = other.user_ != null ? other.User.Clone() : null;
      trips_ = other.trips_.Clone();
      Reservation = other.reservation_ != null ? other.Reservation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgencyResponse Clone() {
      return new AgencyResponse(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Agency.Protocol.AgencyResponse.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Agency.Protocol.AgencyResponse.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 3;
    private global::Agency.Protocol.TravelAgent user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Agency.Protocol.TravelAgent User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "trips" field.</summary>
    public const int TripsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Agency.Protocol.Trip> _repeated_trips_codec
        = pb::FieldCodec.ForMessage(34, global::Agency.Protocol.Trip.Parser);
    private readonly pbc::RepeatedField<global::Agency.Protocol.Trip> trips_ = new pbc::RepeatedField<global::Agency.Protocol.Trip>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Agency.Protocol.Trip> Trips {
      get { return trips_; }
    }

    /// <summary>Field number for the "reservation" field.</summary>
    public const int ReservationFieldNumber = 5;
    private global::Agency.Protocol.Reservation reservation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Agency.Protocol.Reservation Reservation {
      get { return reservation_; }
      set {
        reservation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AgencyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AgencyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Error != other.Error) return false;
      if (!object.Equals(User, other.User)) return false;
      if(!trips_.Equals(other.trips_)) return false;
      if (!object.Equals(Reservation, other.Reservation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      hash ^= trips_.GetHashCode();
      if (reservation_ != null) hash ^= Reservation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
      if (user_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(User);
      }
      trips_.WriteTo(output, _repeated_trips_codec);
      if (reservation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Reservation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      size += trips_.CalculateSize(_repeated_trips_codec);
      if (reservation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reservation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AgencyResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Agency.Protocol.TravelAgent();
        }
        User.MergeFrom(other.User);
      }
      trips_.Add(other.trips_);
      if (other.reservation_ != null) {
        if (reservation_ == null) {
          reservation_ = new global::Agency.Protocol.Reservation();
        }
        Reservation.MergeFrom(other.Reservation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Agency.Protocol.AgencyResponse.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
          case 26: {
            if (user_ == null) {
              user_ = new global::Agency.Protocol.TravelAgent();
            }
            input.ReadMessage(user_);
            break;
          }
          case 34: {
            trips_.AddEntriesFrom(input, _repeated_trips_codec);
            break;
          }
          case 42: {
            if (reservation_ == null) {
              reservation_ = new global::Agency.Protocol.Reservation();
            }
            input.ReadMessage(reservation_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AgencyResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("Unknown")] Unknown = 0,
        [pbr::OriginalName("OK")] Ok = 1,
        [pbr::OriginalName("ERROR")] Error = 2,
        [pbr::OriginalName("GET_ALL_TRIPS")] GetAllTrips = 3,
        [pbr::OriginalName("UPDATE")] Update = 4,
        [pbr::OriginalName("TRIPS_FILTERED")] TripsFiltered = 5,
        [pbr::OriginalName("NEW_RESERVATION")] NewReservation = 6,
        [pbr::OriginalName("USER_LOGGED_IN")] UserLoggedIn = 7,
        [pbr::OriginalName("USER_LOGGED_OUT")] UserLoggedOut = 8,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code